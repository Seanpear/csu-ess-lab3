---
title: "Lab 3: COVID-19"
author:
  - name: Sean Pearson
    email: seanpear@colostate.edu (https://seanpear.github.io/Portfolio/)"
date: 2025-03-31
format: html
execute: 
  echo: true
---

```{r}
# Load required libraries
library(tidyverse)
library(flextable)
library(zoo)
```

## Question 1: 

Open data is essential for shaping our understanding of complex systems like climate change and the dynamics of natural resources. Convenient access to real-time environmental data enables scientists to identify trends, make informed decisions, and allow the public to stay aware of ongoing challenges. 

When this data is no longer accessible, it can slow or stop progress, decrease accountability, and make it difficult to verify past analyses. Independent archiving initiatives, like those from the New York Times or open science communities, guarantee that essential data remains available for future purposes, promoting transparency and reproducibility in science.

## Question 2: 

```{r}
covid_raw <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
```


```{r}
# Parameters 
my.date <- as.Date("2022-02-01")
my.state <- "Colorado"
```

```{r}
covid_subset <- covid_raw %>%
  filter(state == my.state) %>%
  mutate(
    fips = as.character(fips),
  ) %>%
  group_by(county) %>%
  arrange(county, date) %>%
  mutate(
    new_cases = cases - lag(cases),
    new_deaths = deaths - lag(deaths)
  ) %>%
  ungroup()
```

---

## Subset For The Specific Report Date

```{r}
covid_today <- covid_subset %>%
  filter(date == my.date)
```

---

## Step 1: Table 1 — Top 5 Counties by Cumulative Cases

```{r}
top5_cumulative <- covid_today %>%
  arrange(desc(cases)) %>%
  slice(1:5) %>%
  select(County = county, `Cumulative Cases` = cases)

flextable(top5_cumulative) %>%
  set_caption("Top 5 Counties by Cumulative Cases on the Report Date")
```

---

## Step 2: Table 2 — Top 5 Counties by New Cases

```{r}
top5_new <- covid_today %>%
  arrange(desc(new_cases)) %>%
  slice(1:5) %>%
  select(County = county, `New Cases` = new_cases)

flextable(top5_new) %>%
  set_caption("Top 5 Counties by New Cases on the Report Date")
```

---

## Step 3: Identify Safe Counties 

```{r}
# Safe counties = fewer than 100 new cases in the past day 
safe_counties <- covid_today %>%
  filter(new_cases < 100) %>%
  pull(county)

safe_counties
```

---

## Step 4: Text Report

```{r}
total_new_cases <- sum(covid_today$new_cases, na.rm = TRUE)
total_cumulative_cases <- sum(covid_today$cases, na.rm = TRUE)
num_safe_counties <- length(safe_counties)

cat(paste0("As of ", my.date, ", there were ", total_new_cases, 
           " new cases and ", total_cumulative_cases, 
           " cumulative cases across all counties in Colorado. ",
           num_safe_counties, " counties are considered safe under Condition #2."))
```

## Question 3

```{r}
pop_raw <- read_csv("../co-est2023-alldata.csv")
```
## Step 1: Conversions
```{r}
pop_clean <- pop_raw %>%
  filter(STNAME == "Colorado") %>%   
  mutate(
    STATE_FIPS = str_pad(STATE, width = 2, pad = "0"),
    COUNTY_FIPS = str_pad(COUNTY, width = 3, pad = "0"),
    fips = paste0(STATE_FIPS, COUNTY_FIPS)
  ) %>%
  filter(COUNTY_FIPS != "000") %>%
  select(fips, CTYNAME, POPESTIMATE2021)
```

## Step 2: Exploring Data
```{r}
glimpse(pop_clean)
names(pop_clean)
dim(pop_clean)
summary(pop_clean$`POPESTIMATE2021`)
```

## Step 3: Data Observations
The final dataset, pop_clean, contains 64 rows and 3 columns: fips, CTYNAME, and POPESTIMATE2021.The fips column matches up with the FIPS codes in the COVID data, making joining the datasets an easy process. This cleaned dataset is important for understanding how the pandemic affected counties relative to their population sizes.

```{r}
covid_today_pop <- covid_subset %>%
  filter(date == my.date) %>%
  left_join(pop_clean, by = "fips") %>%
  rename(
    population = POPESTIMATE2021,
    county_name = CTYNAME
  ) %>%
  mutate(
    cumulative_per_capita = cases / population * 100000,
    new_cases_per_capita = new_cases / population * 100000,
    new_deaths_per_capita = new_deaths / population * 100000
  )
```

## Step 4: Population Range
In 2021, the population of Colorado counties ranged from 741 to 737,287 residents. The median population was about 15,092, while the mean was 90,806, showing that a few large counties skew the average upward.
---

### Step 5a: Table — Top 5 Counties by Cumulative Cases Per Capita

```{r}
top5_cum_percap <- covid_today_pop %>%
  arrange(desc(cumulative_per_capita)) %>%
  slice(1:5) %>%
  mutate(cumulative_per_capita_round = round(cumulative_per_capita, 2)) %>%
  select(County = county_name, `Cumulative Cases per 100k` = cumulative_per_capita_round)

flextable(top5_cum_percap) %>%
  set_caption("Top 5 Counties by Cumulative Cases per 100,000 Residents on the Report Date")
```

## Step 5b: Table — Top 5 Counties by New Cases Per Capita

```{r}
top5_new_percap <- covid_today_pop %>%   # 
  arrange(desc(new_cases_per_capita)) %>%
  slice(1:5) %>%
  mutate(new_cases_per_capita_round = round(new_cases_per_capita, 2)) %>%
  select(County = county_name, `New Cases per 100k` = new_cases_per_capita_round)

flextable(top5_new_percap) %>%
  set_caption("Top 5 Counties by New Cases per 100,000 Residents on the Report Date")
```

## Question 4: 

```{r}
# Filter for the last 14 days programmatically
covid_14day <- covid_today_pop %>%
  filter(date >= max(date) - 13)   # includes today + previous 13 days = 14 total
```

```{r}
# Group, Summarize, Normalize
covid_14day_summary <- covid_14day %>%
  group_by(county_name) %>%
  summarize(
    total_new_cases_14d = sum(new_cases, na.rm = TRUE),
    population = first(population),   # population is constant within a county
    new_cases_per_100k_14d = total_new_cases_14d / population * 100000
  ) %>%
  arrange(desc(new_cases_per_100k_14d))
```

## Step 1: Table - Top 5 Counties by 14-day Cases Per Capita 
```{r}
# Table - Top 5 Counties by 14-day cases per capita
top5_14d <- covid_14day_summary %>%
  slice(1:5) %>%
  mutate(new_cases_per_100k_14d = round(new_cases_per_100k_14d, 2)) %>%
  select(County = county_name, `New Cases per 100k (14 days)` = new_cases_per_100k_14d)

flextable(top5_14d) %>%
  set_caption("Top 5 Counties by New Cases per 100,000 Residents (Past 14 Days)")
```

```{r}
# Count counties meeting watchlist threshold
watchlist_count <- covid_14day_summary %>%
  filter(new_cases_per_100k_14d > 100) %>%
  nrow()
```
## Step 2: Text Report
```{r}
# Text Report
cat("Number of counties exceeding the watchlist threshold (>100 new cases per 100,000 residents in the last 14 days):", watchlist_count)
```

## Question 5: 

```{r}
# pop_clean bring in DEATHS2021
pop_clean <- pop_raw %>%
  filter(STNAME == "Colorado") %>%
  mutate(
    STATE_FIPS = str_pad(STATE, width = 2, pad = "0"),
    COUNTY_FIPS = str_pad(COUNTY, width = 3, pad = "0"),
    fips = paste0(STATE_FIPS, COUNTY_FIPS)
  ) %>%
  filter(COUNTY_FIPS != "000") %>%
  select(fips, CTYNAME, POPESTIMATE2021, DEATHS2021)
```

```{r}
# Total COVID deaths during 2021 by county
covid_2021 <- covid_subset %>%
  filter(date >= as.Date("2021-01-01") & date <= as.Date("2021-12-31")) %>%
  group_by(county) %>%
  summarize(
    total_covid_deaths_2021 = sum(new_deaths, na.rm = TRUE)
  )
```

```{r}
# Remove " County" to match county names
pop_clean <- pop_clean %>%
  mutate(county = str_remove(CTYNAME, " County"))
```

```{r}
death_ratio <- covid_2021 %>%
  left_join(pop_clean, by = "county") %>%
  mutate(
    covid_death_percent = (total_covid_deaths_2021 / DEATHS2021) * 100
  )
```

## Step 1: Plot Counties Where COVID Deaths >= 20% of All 2021 Deaths 
```{r}
# Plot counties where COVID deaths >= 20% of all 2021 deaths
death_ratio %>%
  filter(covid_death_percent >= 20) %>%
  ggplot(aes(x = reorder(county, covid_death_percent), y = covid_death_percent)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Counties where COVID deaths were ≥20% of total deaths (2021)",
    x = "County",
    y = "COVID Deaths (% of all deaths)"
  ) +
  theme_minimal()
```

## Question 6:

## Step 1: Summarize to State-Level and Filter For the 4 States 
```{r}
# Summarize to state-level and filter for the 4 states
states_of_interest <- c("New York", "Colorado", "Alabama", "Ohio")

state_daily <- covid_raw %>%
  filter(state %in% states_of_interest) %>%
  group_by(state, date) %>%
  summarize(
    cases = sum(cases, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  group_by(state) %>%
  arrange(date) %>%
  mutate(
    new_cases = cases - lag(cases),
    new_cases_7day = zoo::rollmean(new_cases, k = 7, fill = NA, align = "right")
  ) %>%
  ungroup()
```

## Step 2: Faceted Plot of Daily New Cases and 7-day Rolling Mean 
```{r}
# faceted plot of daily new cases and 7-day rolling mean
ggplot(state_daily, aes(x = date)) +
  geom_col(aes(y = new_cases), fill = "lightblue", alpha = 0.7) +
  geom_line(aes(y = new_cases_7day), color = "red", size = 1) +
  facet_wrap(~ state, scales = "free_y") +
  labs(
    title = "Daily New Cases and 7-Day Rolling Mean",
    y = "New Cases",
    x = "Date"
  ) +
  theme_minimal()
```
## Step 3a: Get State Populations From Pop_clean 
```{r}
# Get state populations from pop_clean
state_pop <- pop_raw %>%
  filter(STNAME %in% states_of_interest) %>%
  group_by(STNAME) %>%
  summarize(
    pop2021 = sum(POPESTIMATE2021, na.rm = TRUE)
  ) %>%
  rename(state = STNAME)
```
## Step 3b: Compute Per Capita Metrics 
```{r}
# compute per capita metrics
state_daily_percap <- state_daily %>%
  left_join(state_pop, by = "state") %>%
  mutate(
    new_cases_per100k = (new_cases / pop2021) * 100000,
    new_cases_per100k_7day = zoo::rollmean(new_cases_per100k, k = 7, fill = NA, align = "right")
  )
```
## Step 4: Plot the 7-day Rolling Average Per Capita 
```{r}
# Plot the 7-day rolling average per capita
ggplot(state_daily_percap, aes(x = date, y = new_cases_per100k_7day, color = state)) +
  geom_line(size = 1.2) +
  labs(
    title = "7-Day Rolling Average of New Cases per 100k (Per Capita)",
    y = "New Cases per 100k",
    x = "Date"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")
```
## Step 5: Describe the Influence Scaling by Population Had on the Analysis:

When we scale the data by population, it gives us a better way to compare how badly each state was hit, no matter how big or small they are. Without scaling, bigger states like New York seem way worse just because they have more people. But once we look at cases per 100,000 people, we see that smaller states like Alabama might’ve been hit harder proportionately. So, scaling kind of evens the playing field. It makes big states look less extreme and shows that some smaller ones were actually struggling more than it seemed.

## Question 7: 

```{r}
# Read centroid data
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
```

## Step 1: Prepare the COVID-19 Data 
```{r}
covid_centroid <- covid_raw %>%
  filter(!is.na(fips)) %>%
  mutate(fips = str_pad(fips, width = 5, pad = "0")) %>%
  left_join(county_centroids, by = "fips") %>%
  filter(!is.na(LON) & !is.na(LAT)) %>%
  group_by(fips) %>%
  arrange(date) %>%
  mutate(new_cases = cases - lag(cases),
         new_cases = ifelse(is.na(new_cases), 0, new_cases)) %>%
  ungroup()
```

## Step 2: Calculate the Weighted Mean Center by Month
```{r}
w_mean_monthly <- covid_centroid %>%
  mutate(month = format(date, "%m")) %>%
  group_by(month) %>%
  summarize(
    WMC_LON = weighted.mean(LON, w = new_cases, na.rm = TRUE),
    WMC_LAT = weighted.mean(LAT, w = new_cases, na.rm = TRUE),
    total_cases = sum(new_cases, na.rm = TRUE)
  )
```


## Step 3: Plot the Monthly Weighted Mean Centers 
```{r}
ggplot() +
  borders("state", fill = "grey90", color = "white") +
  geom_point(data = w_mean_monthly, aes(x = WMC_LON, y = WMC_LAT, size = total_cases, color = month), alpha = 0.8) +
  coord_fixed(1.3) +
  scale_size_continuous(range = c(3, 10)) +
  theme_minimal() +
  labs(
    title = "Weighted Mean Center of COVID-19 Outbreak (USA)",
    subtitle = "Monthly Centers",
    x = NULL, y = NULL
  )
```
## Step 4: Describe the Movement of the COVID-19 Weighted Mean

Throughout the year, the weighted mean center of COVID-19 cases remained fairly concentrated in the Midwest and Southern U.S., not straying significantly from coast to coast. This indicates that although hotspots emerged in various locations at various times, the total distribution of case numbers was focused in this central area. Significant population hubs, such as those in Missouri, Illinois, and surrounding states, probably influenced the mean center towards them due to consistently elevated case numbers
